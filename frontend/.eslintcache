[{"M:\\HRC\\frontend\\src\\components\\dashboard.js":"1","M:\\HRC\\frontend\\src\\App.js":"2","M:\\HRC\\frontend\\src\\components\\table.js":"3","M:\\HRC\\frontend\\src\\components\\buttons\\add.js":"4","M:\\HRC\\frontend\\src\\components\\buttons\\edit.js":"5","M:\\HRC\\frontend\\src\\components\\loginScreen.js":"6","M:\\HRC\\frontend\\src\\index.js":"7","M:\\HRC\\frontend\\src\\components\\customRoute.js":"8","M:\\HRC\\frontend\\src\\components\\home.js":"9","M:\\HRC\\frontend\\src\\components\\pagination.js":"10","M:\\HRC\\frontend\\src\\reportWebVitals.js":"11","M:\\HRC\\frontend\\src\\components\\privateRoute.js":"12"},{"size":12164,"mtime":1608023960924,"results":"13","hashOfConfig":"14"},{"size":753,"mtime":1606644391118,"results":"15","hashOfConfig":"14"},{"size":4910,"mtime":1608015192388,"results":"16","hashOfConfig":"14"},{"size":12377,"mtime":1608023792691,"results":"17","hashOfConfig":"14"},{"size":7594,"mtime":1608014884919,"results":"18","hashOfConfig":"14"},{"size":3869,"mtime":1608114684447,"results":"19","hashOfConfig":"14"},{"size":595,"mtime":1606603258813,"results":"20","hashOfConfig":"14"},{"size":339,"mtime":1606641158438,"results":"21","hashOfConfig":"14"},{"size":2601,"mtime":1608023974948,"results":"22","hashOfConfig":"14"},{"size":2919,"mtime":1607925686081,"results":"23","hashOfConfig":"14"},{"size":362,"mtime":1606375116599,"results":"24","hashOfConfig":"14"},{"size":527,"mtime":1606634873516,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1xtdwan",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"M:\\HRC\\frontend\\src\\components\\dashboard.js",["57","58","59","60","61","62","63"],"M:\\HRC\\frontend\\src\\App.js",[],["64","65"],"M:\\HRC\\frontend\\src\\components\\table.js",[],["66","67"],"M:\\HRC\\frontend\\src\\components\\buttons\\add.js",["68","69","70","71","72","73","74","75","76","77"],"import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst AddButton = ({ addModalVisible, setAddModalVisible,\r\n      username, DATA, UPPER_ORDER_AMOUNT, LOWER_ORDER_AMOUNT }) => {\r\n      const [orderID, setOrderID] = useState(\"\");\r\n      const [orderDate, setOrderDate] = useState(\"\");\r\n      const [customerName, setCustomerName] = useState(\"\");\r\n      const [customerNumber, setCustomerNumber] = useState(\"\");\r\n      const [orderAmount, setOrderAmount] = useState(\"\");\r\n      const [notes, setNotes] = useState(\"\");\r\n\r\n      const [orderIDExist, setOrderIDExist] = useState(false);\r\n      const [invalidData, setInvalidData] = useState(false);\r\n\r\n      const currentDate = (minusOne = false) => {\r\n            const today = new Date();\r\n            let dd = today.getDate();\r\n            let mm = today.getMonth() + 1;\r\n            let yyyy = today.getFullYear();\r\n            if (minusOne) {\r\n                  yyyy -= 1;\r\n            }\r\n            if (dd < 10) {\r\n                  dd = '0' + dd;\r\n            }\r\n            if (mm < 10) {\r\n                  mm = '0' + mm;\r\n            }\r\n            return (yyyy + '-' + mm + '-' + dd);\r\n      }\r\n\r\n      const handleClose = () => {\r\n            setOrderID(\"\");\r\n            setOrderDate(\"\"); setCustomerName(\"\");\r\n            setCustomerNumber(\"\"); setOrderAmount(\"\");\r\n            setNotes(\"\"); setOrderIDExist(false);\r\n            setInvalidData(false); setAddModalVisible(false);\r\n      }\r\n\r\n      const suggestOrderID = () => {\r\n            if (addModalVisible) {\r\n                  let req = new XMLHttpRequest();\r\n                  req.onreadystatechange = function () {\r\n                        if (this.readyState === 4 && this.status === 200) {\r\n                              const dataReceived = this.responseText;\r\n                              setOrderID(dataReceived);\r\n                        }\r\n                  }\r\n                  req.open(\"GET\", DATA.SOURCE + \"SuggestNewOrderID\", true);\r\n                  req.send();\r\n            }\r\n      };\r\n\r\n      useEffect(() => {\r\n            orderIDExist && setOrderIDExist(false);\r\n            invalidData && setInvalidData(false);\r\n      }, [orderID, orderAmount, orderDate, customerName, customerNumber]);\r\n\r\n\r\n      const handleAdd = () => {\r\n            if (orderID == \"\" || (orderAmount == \"\" || orderAmount < 1) ||\r\n                  orderDate == \"\" || customerName === \"\" ||\r\n                  customerNumber == \"\") {\r\n                  setInvalidData(true);\r\n                  return;\r\n            }\r\n            let errorText = \"\";\r\n            if (orderAmount > UPPER_ORDER_AMOUNT) {\r\n                  errorText += (\"Order Amount too large\\n\");\r\n            }\r\n            if (orderAmount < LOWER_ORDER_AMOUNT) {\r\n                  errorText += (\"Order Amount too small\\n\");\r\n            }\r\n            if (customerName.length < 3) {\r\n                  errorText += (\"Customer Name too short\\n\");\r\n            }\r\n            if (true) {\r\n                  const selectedDate = new Date(orderDate).getTime();\r\n                  const today = new Date().getTime();\r\n                  let oneYearFromNow = new Date();\r\n                  oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() - 1);\r\n                  oneYearFromNow = oneYearFromNow.getTime();\r\n                  console.log(Object.prototype.toString.call(new Date(orderDate)));\r\n                  if (selectedDate > today || selectedDate <= oneYearFromNow) {\r\n                        errorText += (\"Date should be within last 1 year\\n\");\r\n                  }\r\n                  else if (Object.prototype.toString.call(new Date(orderDate)) != '[object Date]') {\r\n                        errorText += (\"Invalid Date\\n\");\r\n                  }\r\n            }\r\n            if (errorText.length !== 0) {\r\n                  alert(errorText);\r\n                  return;\r\n            }\r\n            let req = new XMLHttpRequest();\r\n            req.onreadystatechange = function () {\r\n                  if (this.readyState === 4 && this.status === 200) {\r\n                        const dataReceived = this.responseText;\r\n                        if (dataReceived === \"0\") { //Duplicate Order_ID\r\n                              alert(\"Duplicate Order ID\");\r\n                              setOrderIDExist(true);\r\n                              return;\r\n                        }\r\n                        else if (dataReceived === \"1\") { //Success\r\n                              window.location.reload();\r\n                        }\r\n                        else if (dataReceived === \"2\") { // Data Invalid\r\n                              alert(\"Data might be Incorrect\");\r\n                        }\r\n                  }\r\n            }\r\n            req.open(\"POST\", DATA.SOURCE + \"AddData\", true);\r\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            const param = (name, value, addAmpersand = \"&\") => {\r\n                  console.log(name + \" : \" + value);\r\n                  if (value === \"\" || value === null) {\r\n                        value = \"NULL_NONE\";\r\n                  }\r\n                  return (addAmpersand + name + \"=\" + value);\r\n            }\r\n            req.send(param(\"order_id\", orderID, \"\") +\r\n                  param(\"customer_name\", customerName) +\r\n                  param(\"customer_id\", customerNumber) +\r\n                  param(\"order_amount\", orderAmount) +\r\n                  param(\"approval_status\", orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"Awaiting Approval\" : \"Approved\") +\r\n                  param(\"approved_by\", orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"\" : username.split(\"_\").join(\" \")) +\r\n                  param(\"notes\", notes) +\r\n                  param(\"order_date\", orderDate));\r\n      }\r\n\r\n      return (\r\n            <Modal show={addModalVisible} onHide={handleClose} backdrop={'static'} keyboard={false}>\r\n                  <Modal.Header closeButton>\r\n                        <Modal.Title>ADD ORDER</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                        <table className=\"add-table-style\" cellpadding=\"10px\" cellspacing=\"5px\">\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"order-id\" >Order ID</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={orderIDExist || (invalidData && orderID == \"\")}\r\n                                                overlay={<Tooltip >{orderIDExist ?\r\n                                                      \"Order ID Already Exists\" : \"Invalid Order ID\"}\r\n                                                </Tooltip>}>\r\n                                                <input className={\"add-input-box arrow-hidden\"} type=\"number\"\r\n                                                      id=\"order-id\" min=\"0\" value={orderID}\r\n                                                      style={{ width: orderID === \"\" ? \"120px\" : \"220px\" }}\r\n                                                      onChange={(e) => { setOrderID(e.target.value); }} />\r\n                                          </OverlayTrigger>\r\n                                          {orderID === \"\" ?\r\n                                                <button className={\"add-edit-button add-suggested-orderid\"}\r\n                                                      onClick={() => { suggestOrderID(); }}>\r\n                                                      Autogenerate</button>\r\n                                                : null}\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"order-date\" >Order Date</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={invalidData && orderDate === \"\"}\r\n                                                overlay={<Tooltip >Required</Tooltip>}>\r\n                                                <input className={\"add-input-box\"} type=\"date\" id=\"order-date\"\r\n                                                      onChange={(e) => setOrderDate(e.target.value)}\r\n                                                      max={currentDate()} min={currentDate(true)} />\r\n                                          </OverlayTrigger>\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"customer-name\" >Company Name</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={invalidData && customerName === \"\"}\r\n                                                overlay={<Tooltip >Required</Tooltip>}>\r\n                                                <input className={\"add-input-box\"} type=\"text\" id=\"customer-name\"\r\n                                                      onChange={(e) => setCustomerName(e.target.value)} />\r\n                                          </OverlayTrigger>\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"customer-number\" >Company Number</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={invalidData && customerNumber == \"\"}\r\n                                                overlay={<Tooltip >Required</Tooltip>}>\r\n                                                <input className={\"add-input-box arrow-hidden\"} type=\"number\" id=\"customer-number\"\r\n                                                      min=\"0\" onChange={(e) => setCustomerNumber(e.target.value)} />\r\n                                          </OverlayTrigger>\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"order-amount\" >Order Amount</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={invalidData\r\n                                                && (orderAmount == \"\" || orderAmount < 1)}\r\n                                                overlay={<Tooltip >{orderAmount == \"\" ? \"Required\" : \"Enter a Valid Amount\"}</Tooltip>}>\r\n                                                <input className={\"add-input-box\"} type=\"number\" id=\"order-amount\"\r\n                                                      min=\"0\" max={UPPER_ORDER_AMOUNT} onChange={(e) => setOrderAmount(e.target.value)} />\r\n                                          </OverlayTrigger>\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"notes\" >Notes</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <input className={\"add-input-box\"} type=\"text\" id=\"notes\"\r\n                                                onChange={(e) => setNotes(e.target.value)} />\r\n                                    </td>\r\n                              </tr>\r\n                        </table>\r\n                        <button className=\"add-edit-button\" style={{ marginLeft: \"35%\", marginTop: \"3%\" }}\r\n                              onClick={() => { handleAdd() }}>\r\n                              <span className=\"button-text\">\r\n                                    Add\r\n                                    </span>\r\n                        </button>\r\n                  </Modal.Body>\r\n            </Modal >\r\n      );\r\n};\r\n\r\nexport default AddButton;","M:\\HRC\\frontend\\src\\components\\buttons\\edit.js",["78","79","80","81","82","83"],"import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\n\r\nconst EditButton = ({ editModalVisible, setEditModalVisible, username,\r\n      checkedOrderID, DATA, UPPER_ORDER_AMOUNT, LOWER_ORDER_AMOUNT }) => {\r\n      const [orderAmount, setOrderAmount] = useState(\"\");\r\n      const [oldOrderAmount, setOldOrderAmount] = useState(\"\");\r\n      const [notes, setNotes] = useState(\"\");\r\n      const [approvedBy, setApprovedBy] = useState(\"\");\r\n\r\n      const [invalidOrderAmount, setInvalidOrderAmount] = useState(false);\r\n\r\n\r\n      const handleClose = () => {\r\n            setEditModalVisible(false);\r\n      }\r\n\r\n      const handleEdit = () => {\r\n            if (orderAmount == \"\" || orderAmount < LOWER_ORDER_AMOUNT || orderAmount > UPPER_ORDER_AMOUNT) {\r\n                  setInvalidOrderAmount(true);\r\n                  return;\r\n            }\r\n            let req = new XMLHttpRequest();\r\n            req.onreadystatechange = function () {\r\n                  if (this.readyState === 4 && this.status === 200) {\r\n                        const dataReceived = this.responseText;\r\n                        if (dataReceived === \"0\") { //SQL Error\r\n                              alert(\"Data might be Incorrect\");\r\n                        }\r\n                        else if (dataReceived === \"1\") { //Success\r\n                              setEditedValues();\r\n                              handleClose();\r\n                        }\r\n                        else { // Something Unexpected\r\n                              alert(\"Something Unexpected :(\");\r\n                        }\r\n                  }\r\n            }\r\n            req.open(\"POST\", DATA.SOURCE + \"UpdateData\", true);\r\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            const param = (name, value, addAmpersand = \"&\") => {\r\n                  console.log(name + \" : \" + value);\r\n                  return (addAmpersand + name + \"=\" + value);\r\n            }\r\n            req.send(param(\"order_id\", checkedOrderID, \"\") +\r\n                  param(\"order_amount\", orderAmount) +\r\n                  param(\"approval_status\", orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"Awaiting Approval\" : \"Approved\") +\r\n                  param(\"approved_by\", orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"NULL_NONE\" : username.split(\"_\").join(\" \")) +\r\n                  param(\"notes\", notes === \"\" ? \"NULL_NONE\" : notes) +\r\n                  param(\"changed\", orderAmount == oldOrderAmount ? \"0\" : \"1\"));\r\n      }\r\n\r\n      const setEditedValues = () => {\r\n            document.getElementById(checkedOrderID).children[8].textContent = notes;\r\n            if (orderAmount != oldOrderAmount) {\r\n                  document.getElementById(checkedOrderID).children[6].textContent = orderAmount;\r\n                  document.getElementById(checkedOrderID).children[2].textContent =\r\n                        (orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"\" : username.split(\"_\").join(\" \"));\r\n                  document.getElementById(checkedOrderID).children[7].textContent =\r\n                        (orderAmount > DATA.LEVEL_1_APPROVAL_AMOUNT ? \"Awaiting Approval\" : \"Approved\");\r\n            }\r\n      }\r\n\r\n      const getStates = () => {\r\n            if (editModalVisible) {\r\n                  setOrderAmount(document.getElementById(checkedOrderID).children[6].textContent);\r\n                  setOldOrderAmount(document.getElementById(checkedOrderID).children[6].textContent);\r\n                  setNotes(document.getElementById(checkedOrderID).children[8].textContent);\r\n                  setApprovedBy(document.getElementById(checkedOrderID).children[2].textContent);\r\n            }\r\n      }\r\n\r\n      useEffect(() => {\r\n            getStates();\r\n      }, [editModalVisible]);\r\n\r\n      useEffect(() => {\r\n            invalidOrderAmount && setInvalidOrderAmount(false);\r\n      }, [orderAmount]);\r\n\r\n\r\n      return (\r\n            <Modal show={editModalVisible} onHide={handleClose} backdrop={'static'} keyboard={false}>\r\n                  <Modal.Header closeButton>\r\n                        <Modal.Title>EDIT ORDER</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                        <table className=\"add-table-style\" cellpadding=\"10px\" cellspacing=\"5px\">\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"order-id\" >Order ID</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <input className={\"add-input-box readonly-input\"}\r\n                                                value={checkedOrderID} readOnly />\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"order-amount\" >Order Amount</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <OverlayTrigger show={invalidOrderAmount}\r\n                                                overlay={<Tooltip >\r\n                                                      {orderAmount == \"\" ? \"Required\" : \"Enter a Valid Amount\"}\r\n                                                </Tooltip>}>\r\n                                                <input className={\"add-input-box\"} type=\"number\" id=\"order-amount\"\r\n                                                      value={orderAmount} min=\"0\" onChange={(e) => setOrderAmount(e.target.value)} required />\r\n                                          </OverlayTrigger>\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"notes\" >Notes</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <input className={\"add-input-box\"} type=\"text\"\r\n                                                value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n                                    </td>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>\r\n                                          <label htmlFor=\"approved_by\" >Approved By</label>\r\n                                    </td>\r\n                                    <td>\r\n                                          <input className={\"add-input-box readonly-input\"} type=\"text\"\r\n                                                value={approvedBy === \"\" ? \"Approval Awaiting\" : approvedBy}\r\n                                                onChange={(e) => setApprovedBy(e.target.value)}\r\n                                                readOnly />\r\n                                    </td>\r\n                              </tr>\r\n                        </table>\r\n                        <button className=\"add-edit-button\" style={{ marginLeft: \"35%\", marginTop: \"3%\" }}\r\n                              onClick={() => { handleEdit() }}>\r\n                              <span className=\"button-text\">\r\n                                    Edit\r\n                                    </span>\r\n                        </button>\r\n                  </Modal.Body>\r\n            </Modal >\r\n      );\r\n};\r\n\r\nexport default EditButton;","M:\\HRC\\frontend\\src\\components\\loginScreen.js",[],"M:\\HRC\\frontend\\src\\index.js",[],["84","85"],"M:\\HRC\\frontend\\src\\components\\customRoute.js",[],"M:\\HRC\\frontend\\src\\components\\home.js",[],"M:\\HRC\\frontend\\src\\components\\pagination.js",[],["86","87"],"M:\\HRC\\frontend\\src\\reportWebVitals.js",[],"M:\\HRC\\frontend\\src\\components\\privateRoute.js",[],["88","89"],{"ruleId":"90","severity":1,"message":"91","line":27,"column":14,"nodeType":"92","messageId":"93","endLine":27,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":134,"column":10,"nodeType":"96","endLine":134,"endColumn":23,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":141,"column":10,"nodeType":"96","endLine":141,"endColumn":23,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":145,"column":26,"nodeType":"102","messageId":"103","endLine":145,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":165,"column":44,"nodeType":"102","messageId":"103","endLine":165,"endColumn":46},{"ruleId":"100","severity":1,"message":"101","line":183,"column":45,"nodeType":"102","messageId":"103","endLine":183,"endColumn":47},{"ruleId":"100","severity":1,"message":"101","line":183,"column":59,"nodeType":"102","messageId":"103","endLine":183,"endColumn":61},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"104","replacedBy":"108"},{"ruleId":"106","replacedBy":"109"},{"ruleId":"94","severity":1,"message":"110","line":61,"column":10,"nodeType":"96","endLine":61,"endColumn":73,"suggestions":"111"},{"ruleId":"100","severity":1,"message":"101","line":65,"column":25,"nodeType":"102","messageId":"103","endLine":65,"endColumn":27},{"ruleId":"100","severity":1,"message":"101","line":65,"column":47,"nodeType":"102","messageId":"103","endLine":65,"endColumn":49},{"ruleId":"100","severity":1,"message":"101","line":66,"column":29,"nodeType":"102","messageId":"103","endLine":66,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":67,"column":34,"nodeType":"102","messageId":"103","endLine":67,"endColumn":36},{"ruleId":"100","severity":1,"message":"112","line":91,"column":80,"nodeType":"102","messageId":"103","endLine":91,"endColumn":82},{"ruleId":"100","severity":1,"message":"101","line":147,"column":105,"nodeType":"102","messageId":"103","endLine":147,"endColumn":107},{"ruleId":"100","severity":1,"message":"101","line":193,"column":95,"nodeType":"102","messageId":"103","endLine":193,"endColumn":97},{"ruleId":"100","severity":1,"message":"101","line":206,"column":65,"nodeType":"102","messageId":"103","endLine":206,"endColumn":67},{"ruleId":"100","severity":1,"message":"101","line":207,"column":81,"nodeType":"102","messageId":"103","endLine":207,"endColumn":83},{"ruleId":"100","severity":1,"message":"101","line":21,"column":29,"nodeType":"102","messageId":"103","endLine":21,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":52,"column":48,"nodeType":"102","messageId":"103","endLine":52,"endColumn":50},{"ruleId":"100","severity":1,"message":"112","line":57,"column":29,"nodeType":"102","messageId":"103","endLine":57,"endColumn":31},{"ruleId":"94","severity":1,"message":"113","line":77,"column":10,"nodeType":"96","endLine":77,"endColumn":28,"suggestions":"114"},{"ruleId":"94","severity":1,"message":"115","line":81,"column":10,"nodeType":"96","endLine":81,"endColumn":23,"suggestions":"116"},{"ruleId":"100","severity":1,"message":"101","line":107,"column":68,"nodeType":"102","messageId":"103","endLine":107,"endColumn":70},{"ruleId":"104","replacedBy":"117"},{"ruleId":"106","replacedBy":"118"},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"106","replacedBy":"122"},"no-unused-vars","'changeLayout' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'resetTableColors', 'retriveData', and 'searchValue'. Either include them or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has missing dependencies: 'currentPage', 'resetTableColors', and 'retriveData'. Either include them or remove the dependency array.",["124"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],"React Hook useEffect has missing dependencies: 'invalidData' and 'orderIDExist'. Either include them or remove the dependency array.",["127"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getStates'. Either include it or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'invalidOrderAmount'. Either include it or remove the dependency array.",["129"],["125"],["126"],["125"],["126"],["125"],["126"],{"desc":"130","fix":"131"},{"desc":"130","fix":"132"},"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [currentPage, resetTableColors, retriveData, searchValue]",{"range":"139","text":"140"},{"range":"141","text":"140"},"Update the dependencies array to be: [orderID, orderAmount, orderDate, customerName, customerNumber, orderIDExist, invalidData]",{"range":"142","text":"143"},"Update the dependencies array to be: [editModalVisible, getStates]",{"range":"144","text":"145"},"Update the dependencies array to be: [invalidOrderAmount, orderAmount]",{"range":"146","text":"147"},[5727,5740],"[currentPage, resetTableColors, retriveData, searchValue]",[5931,5944],[2284,2347],"[orderID, orderAmount, orderDate, customerName, customerNumber, orderIDExist, invalidData]",[3841,3859],"[editModalVisible, getStates]",[3964,3977],"[invalidOrderAmount, orderAmount]"]